{"version":3,"sources":["Components/CardGroup.jsx","constants.js","Components/StateMetaCard.jsx","commonFunctions.js","Components/CityTracker.jsx","Components/CountryTracker.jsx","Components/GlobalTracker.jsx","Components/CustomTabs.jsx","App.js","serviceWorker.js","index.js"],"names":["CardGroup","Text","value","data","gutter","justify","flex","xs","md","title","placement","size","deltaconfirmed","start","end","parseInt","confirmed","duration","separator","active","deltarecovered","recovered","deltadeaths","deaths","STATE_POPULATIONS","Assam","Bihar","Chandigarh","Chhattisgarh","Delhi","Goa","Gujarat","Haryana","Jharkhand","Karnataka","Kerala","Ladakh","Lakshadweep","Maharashtra","Manipur","Meghalaya","Mizoram","Nagaland","Odisha","Puducherry","Punjab","Rajasthan","Sikkim","Telangana","Tripura","Uttarakhand","Total","WorldWide","StateMetaCard","this","props","population","state","console","log","confirmedPerMillion","recoveryPercent","activePercent","deathPercent","numberFormatter","Intl","NumberFormat","isNaN","format","formatNumber","Math","round","toFixed","React","Component","CityTracker","statenotes","orientation","style","color","fontWeight","CountryTracker","GlobalTracker","TabPane","fetchingData","key","a","url","fetchedData","axios","get","statewise","map","stateInfo","statecode","toLowerCase","Object","keys","undefined","CustomTabs","setState","setData","renderedData","fetchRenderedData","marginTop","tabBarGutter","defaultActiveKey","onChange","destroyInactiveTabPane","animated","tab","area","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7087a650.chunk.js","sourcesContent":["import React from 'react';\nimport {Row, Col, Card, Tooltip, Typography} from 'antd';\nimport CountUp from 'react-countup';\n\nconst{ Text } = Typography;\n\nconst CardGroup = (value) => {\n    let data = value.data;\n    if(!data){\n        return (\"Loading..\");\n    }\n    return(\n        <div>\n                {/* <h3>Global Tracker {data.confirmed.value.toString()}</h3> */}\n                {/* <Divider orientation=\"center\" style={{ color: '#333', fontWeight: 'normal' }}>\n                    Global Tracker\n                </Divider> */}\n                {/* <Row justify=\"center\"><Text type=\"secondary\">Last Updated on: &nbsp;&nbsp; {new Date(data.lastupdatedtime).toDateString()} */}\n                {/* </Text><br/><br/></Row> */}\n                <Row gutter={12} justify=\"center\">\n                    <Col flex={1} xs={10} md={3}>\n                        <Tooltip title=\"Confirmed Cases\" placement=\"left\">\n                            <Card size=\"small\" title=\"Confirmed Cases\">\n                                {data.deltaconfirmed && <p>[+{data.deltaconfirmed}]</p>}\n                                <CountUp start={0} end ={parseInt(data.confirmed)} duration={1.5} separator=\",\"></CountUp>\n                            </Card>\n                        </Tooltip>\n                    </Col>\n                    <Col flex={1} xs={10} md={3}>\n                        <Tooltip title=\"Active Cases\" placement=\"bottom\">\n                            <Card size=\"small\" title=\"Active\">\n                                <CountUp start={0} end ={parseInt(data.active)} duration={1.5} separator=\",\"></CountUp>\n                            </Card>\n                        </Tooltip>\n                    </Col>\n                    <Col flex={1} xs={10} md={3}>\n                        <Tooltip title=\"Total Recovered\" placement=\"bottom\">\n                            <Card size=\"small\" title=\"Recovered\">\n                                {data.deltarecovered && <p>[+{data.deltarecovered}]</p>}\n                                <CountUp start={0} end ={parseInt(data.recovered)} duration={1.5} separator=\",\"></CountUp>\n                            </Card>\n                        </Tooltip>\n                    </Col>\n                    <Col flex={1} xs={10} md={3}>\n                        <Tooltip title=\"Total Deaths\" placement=\"right\">\n                            <Card size=\"small\" title=\"Deceased\">\n                                {data.deltadeaths && <p>[+{data.deltadeaths}]</p>}\n                                <CountUp start={0} end ={parseInt(data.deaths)} duration={1.5} separator=\",\"></CountUp>\n                            </Card>\n                        </Tooltip>\n                    </Col>\n                </Row>\n            </div>\n    );\n}\n\n\nexport default CardGroup;","export const STATE_POPULATIONS = {\n    'Andaman and Nicobar Islands': 397000,\n    'Andhra Pradesh': 52221000,\n    'Arunachal Pradesh': 1504000,\n    Assam: 34293000,\n    Bihar: 119520000,\n    Chandigarh: 1179000,\n    Chhattisgarh: 28724000,\n    'Dadra and Nagar Haveli and Daman and Diu': 959000,\n    Delhi: 19814000,\n    Goa: 1540000,\n    Gujarat: 67936000,\n    Haryana: 28672000,\n    'Himachal Pradesh': 7300000,\n    'Jammu and Kashmir': 13203000,\n    Jharkhand: 37403000,\n    Karnataka: 65798000,\n    Kerala: 35125000,\n    Ladakh: 293000,\n    Lakshadweep: 68000,\n    'Madhya Pradesh': 82232000,\n    Maharashtra: 122153000,\n    Manipur: 3103000,\n    Meghalaya: 3224000,\n    Mizoram: 1192000,\n    Nagaland: 2150000,\n    Odisha: 43671000,\n    Puducherry: 1504000,\n    Punjab: 29859000,\n    Rajasthan: 77264000,\n    Sikkim: 664000,\n    'Tamil Nadu': 75695000,\n    Telangana: 37220000,\n    Tripura: 3992000,\n    'Uttar Pradesh': 224979000,\n    Uttarakhand: 11141000,\n    'West Bengal': 96906000,\n    Total: 1332900000,\n    WorldWide:7713468100\n  };","import React from 'react';\nimport { Row, Col, Card } from 'antd';\nimport { STATE_POPULATIONS } from '../constants';\nimport {formatNumber} from '../commonFunctions';\n\n\nclass StateMetaCard extends React.Component{\n    render(){\n        let data = this.props.data;\n        let population = STATE_POPULATIONS[data.state];\n        console.log(population);\n        \n        const confirmed = data.confirmed;\n        const active = data.active;\n        const deaths = data.deaths;\n        const recovered = data.recovered;\n        const confirmedPerMillion = (confirmed / population) * 1000000;\n        const recoveryPercent = (recovered / confirmed) * 100;\n        const activePercent = (active / confirmed) * 100;\n        const deathPercent = (deaths / confirmed) * 100;\n        // const testPerMillion = (lastTestObject?.totaltested / population) * 1000000;\n        // const growthRate =\n            // ((previousDayData - sevenDayBeforeData) / sevenDayBeforeData) * 100;\n        // const totalConfirmedPerMillion =\n        //     (totalData[0].confirmed / 1332900000) * 1000000;\n        return(\n            <div>\n                <h3>{data.state} Population: {formatNumber(population)}</h3>\n                <Row gutter={12} justify=\"center\">\n                    <Col flex={1} xs={10} md={3}>\n                        <Card size=\"small\" title=\"Confirmed Per Million\">\n                            <p>{Math.round(confirmedPerMillion)} out of every 1 million people in {data.state} have tested positive for the virus.\n                            </p>\n                        </Card>\n                    </Col>\n                    <Col flex={1} xs={10} md={3}>\n                        <Card size=\"small\" title=\"Active\">\n                            <p>For every 100 confirmed cases, {activePercent.toFixed(0)} are currently infected.\n                            </p>\n                        </Card>\n                    </Col>\n                    <Col flex={1} xs={10} md={3}>\n                        <Card size=\"small\" title=\"Recovery Rate\">\n                            <p>For every 100 confirmed cases, {Math.round(recoveryPercent.toFixed(0))} have recovered from the virus.\n                            </p>\n                        </Card>\n                    </Col>\n                    <Col flex={1} xs={10} md={3}>\n                        <Card size=\"small\" title=\"Mortality Rate\">\n                            <p>For every 100 confirmed cases, {Math.round(deathPercent.toFixed(0))} have unfortunately passed away from the virus.\n                            </p>\n                        </Card> \n                    </Col>\n                </Row>\n            </div>\n            \n        );\n    }\n}\n\nexport default StateMetaCard;","export const formatNumber = (value) => {\n    const numberFormatter = new Intl.NumberFormat('en-IN');\n    return isNaN(value) ? '-' : numberFormatter.format(value);\n  };","import React from 'react';\nimport CardGroup from './CardGroup';\nimport StateMetaCard from './StateMetaCard';\nimport { Divider } from 'antd';\n\nclass CityTracker extends React.Component{\n    render(){\n        let data = this.props.data;\n        \n        if(!data){\n            return (\"Loading..\");\n        }\n        \n        // console.log(data);\n        return(\n            <div>\n                <div>{data.statenotes}</div>\n                <CardGroup data={data} />\n                <Divider orientation=\"center\" style={{ color: '#333', fontWeight: 'normal' }} />\n                <StateMetaCard data={data}/>\n            </div>\n        );\n    }\n}\n\nexport default CityTracker;","import React from 'react';\nimport CardGroup from './CardGroup';\nimport StateMetaCard from './StateMetaCard';\nimport { Divider } from 'antd';\n\nclass CountryTracker extends React.Component{\n    render(){\n        let data = this.props.data;\n        \n        if(!data){\n            return (\"Loading..\");\n        }\n        console.log(data);\n        \n        return(\n            <div>\n                <CardGroup data={data} />\n                <Divider orientation=\"center\" style={{ color: '#333', fontWeight: 'normal' }} />\n                <StateMetaCard data={data}/>\n            </div>\n        );\n    }\n}\n\nexport default CountryTracker;","import React from 'react';\n// import {Row, Col, Card, Tooltip, Typography} from 'antd';\n// import CountUp from 'react-countup';\nimport CardGroup from './CardGroup';\nimport StateMetaCard from './StateMetaCard';\nimport { Divider } from 'antd';\n\n// const{ Text } = Typography;\n\nclass GlobalTracker extends React.Component{\n    \n    render(){\n        let data = this.props.data;\n        \n        if(!data){\n            return (\"Loading..\");\n        }\n        return(\n            <div>\n                <CardGroup data={data} />\n                <Divider orientation=\"center\" style={{ color: '#333', fontWeight: 'normal' }} />\n                <StateMetaCard data={data}/>\n            </div>\n        );\n    }\n}\n\nexport default GlobalTracker;","import React from \"react\";\nimport axios from \"axios\";\nimport { Tabs } from \"antd\";\n\nimport CityTracker from \"./CityTracker\";\nimport CountryTracker from \"./CountryTracker\";\nimport GlobalTracker from \"./GlobalTracker\";\n\n\n\nconst { TabPane } = Tabs;\n\nconst fetchingData = async (key) => {\n    let url = \"\";\n    let fetchedData ={\n        \"active\": 0,\n        \"confirmed\": 0,\n        \"deaths\": 0,\n        \"deltaconfirmed\": 0,\n        \"deltadeaths\": 0,\n        \"deltarecovered\": 0,\n        \"lastupdatedtime\": \"\",\n        \"recovered\": 0,\n        \"state\": \"\",\n        \"statecode\": \"\",\n        \"statenotes\": \"\"\n    };\n    switch (parseInt(key)) {\n        case 1:\n            url = \"https://api.covid19india.org/data.json\";\n            try {\n                let { data } = await axios.get(url);\n                data.statewise.map(stateInfo=>{\n                    if (stateInfo.statecode.toLowerCase() === \"dl\") {\n                        fetchedData = stateInfo;\n                    }\n                });\n            } catch (error) {\n                console.log(\"error in getting data for City\"); \n            }\n            break;\n        case 2:\n            url = \"https://api.covid19india.org/data.json\";\n            try {\n                let { data } = await axios.get(url);\n                fetchedData = data.statewise[0];\n            } catch (error) {\n                console.log(\"error in getting data for Country\"); \n            }\n            break;\n        case 3:\n            url = \"https://covid19.mathdro.id/api\";\n            try {\n                let { data }  = await axios.get(url);\n                Object.keys(fetchedData).map(key =>{\n                    if(data[key] !== undefined)\n                    {\n                        fetchedData[key] = data[key].value\n                    }\n                    \n                })\n                fetchedData[\"active\"] = fetchedData.confirmed - fetchedData.recovered - fetchedData.deaths;\n                fetchedData[\"lastupdatedtime\"] = data[\"lastUpdate\"];\n                fetchedData[\"state\"] = \"WorldWide\";\n            } catch (error) {\n                console.log(\"error in getting data for Global\");    \n            }\n\n            break;\n        default:\n            break;\n    }\n    // console.log(\"returin\",fetchedData);\n    \n    return fetchedData;\n}\n\nclass CustomTabs extends React.Component {\n    \n    state = {\n    };\n\n    // constructor(props){\n    //     super(props);\n    // }\n\n    setData(data){\n        this.setState({\n            data:data,\n        })\n    }\n\n    async fetchRenderedData(key){\n        this.setData(undefined);\n        const renderedData = await fetchingData(key);\n        // console.log(key,renderedData);\n        \n        this.setData(renderedData);    \n    }\n\n    componentDidMount(){\n        this.fetchRenderedData(1);\n    }\n\n    render(){\n        let data = this.state.data;\n        \n        // if(!data){\n        //     return (\"Loading..\");\n        // }\n\n        return(\n            <Tabs style={{marginTop: 20}}tabBarGutter={50} defaultActiveKey=\"1\" onChange={(key)=>this.fetchRenderedData(key)} size=\"large\" destroyInactiveTabPane=\"false\" animated={false}>\n                <TabPane tab=\"Delhi\" key=\"1\">\n                    <CityTracker area=\"Delhi\" data={data} />\n                </TabPane>\n                <TabPane tab=\"India\" key=\"2\">\n                    <CountryTracker area=\"India\" data={data} />\n                </TabPane>\n                <TabPane tab=\"WorldWide\" key=\"3\">\n                    <GlobalTracker area=\"WorldWide\" data={data} />\n                </TabPane>\n            </Tabs>\n        );\n    }\n}\n\n\nexport default CustomTabs;","import React from 'react';\nimport './App.css';\nimport CustomTabs from './Components/CustomTabs';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CustomTabs />  \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}