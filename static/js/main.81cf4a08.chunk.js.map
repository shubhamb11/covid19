{"version":3,"sources":["Components/CardGroup.jsx","constants.js","Components/StateMetaCard.jsx","commonFunctions.js","Components/CityTracker.jsx","Components/CountryTracker.jsx","Components/GlobalTracker.jsx","Components/CustomTabs.jsx","App.js","serviceWorker.js","index.js"],"names":["Text","CardGroup","value","data","size","className","justify","type","Date","lastupdatedtime","toDateString","InfoCircleOutlined","onClick","notification","style","width","marginLeft","message","state","description","dangerouslySetInnerHTML","__html","statenotes","gutter","xs","md","title","placement","bordered","deltaconfirmed","start","end","parseInt","confirmed","duration","separator","active","deltarecovered","recovered","deltadeaths","deaths","STATE_POPULATIONS","Assam","Bihar","Chandigarh","Chhattisgarh","Delhi","Goa","Gujarat","Haryana","Jharkhand","Karnataka","Kerala","Ladakh","Lakshadweep","Maharashtra","Manipur","Meghalaya","Mizoram","Nagaland","Odisha","Puducherry","Punjab","Rajasthan","Sikkim","Telangana","Tripura","Uttarakhand","Total","WorldWide","StateMetaCard","this","props","population","console","log","confirmedPerMillion","recoveryPercent","activePercent","deathPercent","numberFormatter","Intl","NumberFormat","isNaN","format","formatNumber","Math","round","toFixed","React","Component","CityTracker","CountryTracker","GlobalTracker","TabPane","fetchingData","key","a","url","fetchedData","axios","get","statewise","map","stateInfo","statecode","toLowerCase","Object","keys","undefined","CustomTabs","setState","setData","renderedData","fetchRenderedData","tabBarGutter","defaultActiveKey","onChange","destroyInactiveTabPane","animated","tab","area","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.81cf4a08.chunk.js","sourcesContent":["import React from 'react';\nimport {Row, Col, Card, Tooltip, Typography, Spin, notification} from 'antd';\nimport CountUp from 'react-countup';\nimport { InfoCircleOutlined } from '@ant-design/icons';\n\nconst{ Text } = Typography;\n\nconst CardGroup = (value) => {\n    let data = value.data;\n    if(!data){\n        return (\n            <Spin size=\"large\" />\n        );\n    }\n    const openNotificationWithIcon = type => {\n        notification[type]({\n            style:{\n                width:300,\n                marginLeft:90,\n            },\n            message: data.state,\n            description: <div className=\"txt\" dangerouslySetInnerHTML={{ __html: data.statenotes }} />\n        });\n    };\n    \n\n    return(\n        <div className=\"card-group\">\n                {/* <h3>Global Tracker {data.confirmed.value.toString()}</h3> */}\n                {/* <Divider orientation=\"center\" style={{ color: '#333', fontWeight: 'normal' }}>\n                    Global Tracker\n                </Divider> */}\n                <Row justify=\"center\"><Text className=\"txt\" type=\"secondary\">Last Updated on: &nbsp;&nbsp; {new Date(data.lastupdatedtime).toDateString()} \n                &nbsp;<InfoCircleOutlined onClick={() => openNotificationWithIcon('success')} />\n                </Text><br/><br/></Row>\n                <Row gutter={12} justify=\"center\">\n                    <Col xs={10} md={3} className=\"confirmed meta-item\">\n                        <Tooltip title=\"Confirmed Cases\" placement=\"left\">\n                            <Card size=\"small\" bordered={false} >\n                                <h4 className=\"title\">Confirmed Cases</h4>\n                                {data.deltaconfirmed !==0 && <p>[+{data.deltaconfirmed}]</p>}\n                                <p><CountUp start={0} end ={parseInt(data.confirmed)} duration={1.5} separator=\",\"></CountUp></p>\n                            </Card>\n                        </Tooltip>\n                    </Col>\n                    <Col xs={10} md={3} className=\"active meta-item\">\n                        <Tooltip title=\"Active Cases\" placement=\"bottom\">\n                            <Card size=\"small\" bordered={false} >\n                                <h4 className=\"title\">Active</h4>\n                                <p><CountUp start={0} end ={parseInt(data.active)} duration={1.5} separator=\",\"></CountUp></p>\n                            </Card>\n                        </Tooltip>\n                    </Col>\n                    <Col xs={10} md={3} className=\"recovered meta-item\">\n                        <Tooltip title=\"Total Recovered\" placement=\"bottom\">\n                            <Card size=\"small\" bordered={false} >\n                                <h4 className=\"title\">Recovered</h4>\n                                {data.deltarecovered !== 0 && <p>[+{data.deltarecovered}]</p>}\n                                <p><CountUp start={0} end ={parseInt(data.recovered)} duration={1.5} separator=\",\"></CountUp></p>\n                            </Card>\n                        </Tooltip>\n                    </Col>\n                    <Col xs={10} md={3} className=\"deaths meta-item\">\n                        <Tooltip title=\"Total Deaths\" placement=\"right\">\n                            <Card size=\"small\" bordered={false} >\n                                <h4 className=\"title\">Deceased</h4>\n                                {data.deltadeaths !== 0 && <p>[+{data.deltadeaths}]</p>}\n                                <p><CountUp start={0} end ={parseInt(data.deaths)} duration={1.5} separator=\",\"></CountUp></p>\n                            </Card>\n                        </Tooltip>\n                    </Col>\n                </Row>\n            </div>\n    );\n}\n\n\nexport default CardGroup;","export const STATE_POPULATIONS = {\n    'Andaman and Nicobar Islands': 397000,\n    'Andhra Pradesh': 52221000,\n    'Arunachal Pradesh': 1504000,\n    Assam: 34293000,\n    Bihar: 119520000,\n    Chandigarh: 1179000,\n    Chhattisgarh: 28724000,\n    'Dadra and Nagar Haveli and Daman and Diu': 959000,\n    Delhi: 19814000,\n    Goa: 1540000,\n    Gujarat: 67936000,\n    Haryana: 28672000,\n    'Himachal Pradesh': 7300000,\n    'Jammu and Kashmir': 13203000,\n    Jharkhand: 37403000,\n    Karnataka: 65798000,\n    Kerala: 35125000,\n    Ladakh: 293000,\n    Lakshadweep: 68000,\n    'Madhya Pradesh': 82232000,\n    Maharashtra: 122153000,\n    Manipur: 3103000,\n    Meghalaya: 3224000,\n    Mizoram: 1192000,\n    Nagaland: 2150000,\n    Odisha: 43671000,\n    Puducherry: 1504000,\n    Punjab: 29859000,\n    Rajasthan: 77264000,\n    Sikkim: 664000,\n    'Tamil Nadu': 75695000,\n    Telangana: 37220000,\n    Tripura: 3992000,\n    'Uttar Pradesh': 224979000,\n    Uttarakhand: 11141000,\n    'West Bengal': 96906000,\n    Total: 1332900000,\n    WorldWide:7713468100\n  };","import React from 'react';\nimport { Row, Col, Card } from 'antd';\nimport { STATE_POPULATIONS } from '../constants';\nimport {formatNumber} from '../commonFunctions';\n\n\nclass StateMetaCard extends React.Component{\n    render(){\n        let data = this.props.data;\n        let population = STATE_POPULATIONS[data.state];\n        console.log(population);\n        \n        const confirmed = data.confirmed;\n        const active = data.active;\n        const deaths = data.deaths;\n        const recovered = data.recovered;\n        const confirmedPerMillion = (confirmed / population) * 1000000;\n        const recoveryPercent = (recovered / confirmed) * 100;\n        const activePercent = (active / confirmed) * 100;\n        const deathPercent = (deaths / confirmed) * 100;\n        // const testPerMillion = (lastTestObject?.totaltested / population) * 1000000;\n        // const growthRate =\n            // ((previousDayData - sevenDayBeforeData) / sevenDayBeforeData) * 100;\n        // const totalConfirmedPerMillion =\n        //     (totalData[0].confirmed / 1332900000) * 1000000;\n        return(\n            <div className=\"card-group\">\n                <h2 className=\"txt\">{data.state} Population: {formatNumber(population)}</h2>\n                <Row gutter={12} justify=\"center\">\n                    <Col xs={10} md={3} className=\"confirmed meta-item\">\n                        <Card size=\"small\" bordered={false} >\n                            <h4 className=\"title\">Confirmed Per Million</h4>\n                            <p className=\"content\">{Math.round(confirmedPerMillion)} out of every 1 million people in {data.state} have tested positive for the virus.\n                            </p>\n                        </Card>\n                    </Col>\n                    <Col xs={10} md={3} className=\"active meta-item\">\n                        <Card size=\"small\" bordered={false} >\n                            <h4 className=\"title\">Active</h4>\n                            <p className=\"content\">For every 100 confirmed cases, {activePercent.toFixed(0)} are currently infected.\n                            </p>\n                        </Card>\n                    </Col>\n                    <Col xs={10} md={3} className=\"recovered meta-item\">\n                        <Card size=\"small\" bordered={false} >\n                            <h4 className=\"title\">Recovery Rate</h4>\n                            <p className=\"content\">For every 100 confirmed cases, {Math.round(recoveryPercent.toFixed(0))} have recovered from the virus.\n                            </p>\n                        </Card>\n                    </Col>\n                    <Col xs={10} md={3} className=\"deaths meta-item\">\n                        <Card size=\"small\" bordered={false}>\n                            <h4 className=\"title\">Mortality Rate</h4>\n                            <p className=\"content\">For every 100 confirmed cases, {Math.round(deathPercent.toFixed(0))} have unfortunately passed away from the virus.\n                            </p>\n                        </Card> \n                    </Col>\n                </Row>\n            </div>\n            \n        );\n    }\n}\n\nexport default StateMetaCard;","export const formatNumber = (value) => {\n    const numberFormatter = new Intl.NumberFormat('en-IN');\n    return isNaN(value) ? '-' : numberFormatter.format(value);\n  };","import React from 'react';\nimport CardGroup from './CardGroup';\nimport StateMetaCard from './StateMetaCard';\nimport { Spin } from 'antd';\n\n\nclass CityTracker extends React.Component{\n    render(){\n        let data = this.props.data;\n        \n        if(!data){\n            return (<Spin size=\"large\" />);\n        }\n        \n        // console.log(data);\n        return(\n            <div>\n                <CardGroup data={data} />\n                {/* <Divider orientation=\"center\" style={{ color: '#333', fontWeight: 'normal' }} /> */}\n                <StateMetaCard data={data}/>\n            </div>\n        );\n    }\n}\n\nexport default CityTracker;","import React from 'react';\nimport CardGroup from './CardGroup';\nimport StateMetaCard from './StateMetaCard';\nimport { Spin } from 'antd';\n\nclass CountryTracker extends React.Component{\n    render(){\n        let data = this.props.data;\n        \n        if(!data){\n            return (<Spin size=\"large\" />);\n        }\n        console.log(data);\n        \n        return(\n            <div>\n                <CardGroup data={data} />\n                {/* <Divider orientation=\"center\" style={{ color: '#333', fontWeight: 'normal' }} /> */}\n                <StateMetaCard data={data}/>\n            </div>\n        );\n    }\n}\n\nexport default CountryTracker;","import React from 'react';\n// import {Row, Col, Card, Tooltip, Typography} from 'antd';\n// import CountUp from 'react-countup';\nimport CardGroup from './CardGroup';\nimport StateMetaCard from './StateMetaCard';\nimport { Spin } from 'antd';\n\n// const{ Text } = Typography;\n\nclass GlobalTracker extends React.Component{\n    \n    render(){\n        let data = this.props.data;\n        \n        if(!data){\n            return (<Spin size=\"large\" />);\n        }\n        return(\n            <div>\n                <CardGroup data={data} />\n                {/* <Divider orientation=\"center\" style={{ color: '#333', fontWeight: 'normal' }} /> */}\n                <StateMetaCard data={data}/>\n            </div>\n        );\n    }\n}\n\nexport default GlobalTracker;","import React from \"react\";\nimport axios from \"axios\";\nimport { Tabs } from \"antd\";\n\nimport CityTracker from \"./CityTracker\";\nimport CountryTracker from \"./CountryTracker\";\nimport GlobalTracker from \"./GlobalTracker\";\n\n\n\nconst { TabPane } = Tabs;\n\nconst fetchingData = async (key) => {\n    let url = \"\";\n    let fetchedData ={\n        \"active\": 0,\n        \"confirmed\": 0,\n        \"deaths\": 0,\n        \"deltaconfirmed\": 0,\n        \"deltadeaths\": 0,\n        \"deltarecovered\": 0,\n        \"lastupdatedtime\": \"\",\n        \"recovered\": 0,\n        \"state\": \"\",\n        \"statecode\": \"\",\n        \"statenotes\": \"\"\n    };\n    switch (parseInt(key)) {\n        case 1:\n            url = \"https://api.covid19india.org/data.json\";\n            try {\n                let { data } = await axios.get(url);\n                data.statewise.map(stateInfo=>{\n                    if (stateInfo.statecode.toLowerCase() === \"dl\") {\n                        fetchedData = stateInfo;\n                    }\n                    return fetchedData;\n                });\n            } catch (error) {\n                console.log(\"error in getting data for City\"); \n            }\n            break;\n        case 2:\n            url = \"https://api.covid19india.org/data.json\";\n            try {\n                let { data } = await axios.get(url);\n                fetchedData = data.statewise[0];\n            } catch (error) {\n                console.log(\"error in getting data for Country\"); \n            }\n            break;\n        case 3:\n            url = \"https://covid19.mathdro.id/api\";\n            try {\n                let { data }  = await axios.get(url);\n                Object.keys(fetchedData).map(key =>{\n                    if(data[key] !== undefined)\n                    {\n                        fetchedData[key] = data[key].value\n                    }\n                    return fetchedData;\n                })\n                fetchedData[\"active\"] = fetchedData.confirmed - fetchedData.recovered - fetchedData.deaths;\n                fetchedData[\"lastupdatedtime\"] = data[\"lastUpdate\"];\n                fetchedData[\"state\"] = \"WorldWide\";\n            } catch (error) {\n                console.log(\"error in getting data for Global\");    \n            }\n\n            break;\n        default:\n            break;\n    }\n    // console.log(\"returin\",fetchedData);\n    \n    return fetchedData;\n}\n\nclass CustomTabs extends React.Component {\n    \n    state = {\n    };\n\n    // constructor(props){\n    //     super(props);\n    // }\n\n    setData(data){\n        this.setState({\n            data:data,\n        })\n    }\n\n    async fetchRenderedData(key){\n        this.setData(undefined);\n        const renderedData = await fetchingData(key);\n        // console.log(key,renderedData);\n        \n        this.setData(renderedData);    \n    }\n\n    componentDidMount(){\n        this.fetchRenderedData(1);\n    }\n\n    render(){\n        let data = this.state.data;\n        \n        // if(!data){\n        //     return (\"Loading..\");\n        // }\n\n        return(\n            <Tabs className=\"main-tabs\" tabBarGutter={50} defaultActiveKey=\"1\" onChange={(key)=>this.fetchRenderedData(key)} size=\"large\" destroyInactiveTabPane=\"false\" animated={false}>\n                <TabPane tab=\"Delhi\" key=\"1\">\n                    <CityTracker area=\"Delhi\" data={data} />\n                </TabPane>\n                <TabPane tab=\"India\" key=\"2\">\n                    <CountryTracker area=\"India\" data={data} />\n                </TabPane>\n                <TabPane tab=\"WorldWide\" key=\"3\">\n                    <GlobalTracker area=\"WorldWide\" data={data} />\n                </TabPane>\n            </Tabs>\n        );\n    }\n}\n\n\nexport default CustomTabs;","import React from 'react';\nimport './App.scss';\nimport CustomTabs from './Components/CustomTabs';\nimport { BackTop } from 'antd';\n\nclass App extends React.Component{\n  render(){\n    return (\n      <div className=\"App\">\n        <BackTop />\n        <CustomTabs />  \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}